#+title: Split Paired-End Read Statistics
#+author: Vince Buffalo
#+email: vsbuffalo@ucdavis.edu
#+date: <2011-02-16 Wed>
#+babel: :results output :exports both :comments no :session

* Finding split paired-end reads with =ss.py=

=ss.py= first gathers all paired-end reads in the dataset in a hash by
reference name. The reads must be mapped and paired, according to the
SAM file bitflag field. 

Note that when only proper-paired-end reads are used, the number of
split paired-end reads produced is 0. This makes sense, given the
requirements for a read to be considered a proper pair (from the BWA
mailing list):

#+begin_quote
Proper pairs are ones with correct orientation and within a sensible
distance. For illumina short-insert libraries, the distance is about 6
sigma of the insert size distribution. The exact boundaries are
outputted in the stderr of sampe.
#+end_quote

** Verification of =ss.py= output

To verify the output of =ss.py=, the =CAGTACT= barcoded sample was
processed, and the =CAGTACT-chr6-chr15.txt= file was compared to the
original SAM entry.

From =ss.py=:
#+begin_example
SOLEXA2_1222:2:33:2651:9430#0	TAGAAAGGCGGGAAGGGT...AGAAGTAGACATGGG	GTTGTGAGCCCCT...CGTCTGGGAGG	51847159	43369305
#+end_example

From =CAGTACT-chr6-chr15.txt=:
#+begin_example
SOLEXA2_1222:2:33:2651:9430#0   97      chr15   43369306        0       41M     chr6    51847160        0       GTTGTGAGCCCCT...CGTCTGGGAGG
SOLEXA2_1222:2:33:2651:9430#0   145     chr6    51847160        13      78M     chr15   43369306        0       TAGAAAGGCGGGAAGGGT...AGAAGTAGACATGGG
#+end_example

The filename indicates =chr6= is the first. The corresponding sequence
"TAG..." and position 51,847,160 are correct. Likewise with =chr15=.

#+srcname: most-common-paired-end-splits
#+begin_src sh +n :export both
wc -l CAGTACT-out/* | sort | tail -n 10
#+end_src

#+results: most-common-paired-end-splits
#+begin_example
     487 CAGTACT-out/CAGTACT-chr11-chr4.txt
     522 CAGTACT-out/CAGTACT-chr11-chr3.txt
     636 CAGTACT-out/CAGTACT-chr7-chr11.txt
     770 CAGTACT-out/CAGTACT-chr11-chr1.txt
    1221 CAGTACT-out/CAGTACT-chr6-chr11.txt
    1861 CAGTACT-out/CAGTACT-chr11-chr2.txt
    3681 CAGTACT-out/CAGTACT-chr11-chr9.txt
    5650 CAGTACT-out/CAGTACT-chr9-chr21.txt
    6444 CAGTACT-out/CAGTACT-chr11-chr21.txt
   34562 total
#+end_example


** Positions of split paired-end reads of Chromosome 11

Now, we are just curious about splits that include Chromosome 11,
specifically, chr11:118,359,160 - ch11:118,359,712. We load in all
data produced by =ss.py=, then (for an example) use the file with the
most reads.

#+begin_src R +n :tangle R/example-analysis.R :results silent
  suppressMessages({library(ggplot2)})

  # Load files with chr11
  dirname = "CAGTACT-out"
  files <- dir(dirname, pattern="chr11")
  
  # Now, read in contents
  data <- lapply(as.list(files), function(x) {
    tmp <- gsub("[ATCG]+-([^-]+)-([^-]+).txt", "\\1;;;;\\2", x)
    chrs <- unlist(strsplit(tmp, ";;;;"))
    cnames <- paste(c('seq', 'seq', 'pos', 'pos'), chrs, sep='.')
    d <- read.delim(paste(dirname, x, sep='/'), header=FALSE)
    colnames(d) <- c('read.name', cnames, 'read1')
    return(d)
  })
  
  names(data) <- gsub("([^\\.]+)\\.txt", "\\1", files)

  # Which chromosome pair contains the most reads? We'll use that for
  # testing.
  lengths <- unlist(lapply(data, nrow))
  group.with.most.reads <- names(data)[which(max(lengths) == lengths)]

  d <- data[[group.with.most.reads]]
  #d <- data[['CAGTACT-chr11-chr2']]
  d <- d[d$read1 == 'chr11',]
#+end_src

#+results:

Now, we produce histograms of positions of chromosome 11, and
investigate the number of split paired-end reads with a mapped read in
this position.

#+begin_src R +n :tangle R/example-analysis.R :file results/rough-hist.png :width 800 :height 800 :results output graphics
  # basic histogram - doesn't show us too much because it's so dense in one area
  hist(d$pos.chr11, xlab='position', 
       main=sprintf("Distribution of mapped paired-end reads in chr11, in group '%s'", group.with.most.reads))
  
#+end_src

#+results:
[[file:results/rough-hist.png]]

#+begin_src R +n :tangle R/example-analysis.R
  # how many are in the region of interest?
  lower <- 118359160
  upper <- 118359712
  of.interest <- d$pos.chr11 >= lower & d$pos.chr11 <= upper
  
  print(sprintf("Number of reads in region of interest: %s", round(length(which(of.interest))/length(d$pos.chr11), 5)))
#+end_src

#+results:
: [1] "Number of reads in region of interest: 0.00637"


Most reads are not in the region of interest. Where are they? Is the region of interest incorrect?
#+begin_src R +n :tangle R/example-analysis.R
  ncuts <- 10000
  thresh <- 10
  counts.by.pos <- cut(d$pos.chr11, ncuts)
  tmp <- table(counts.by.pos)
  print.table(tmp[tmp > thresh])
#+end_src

#+results:
:  (1.1835e+08,1.1836e+08] 
:                    1240


Now we have a new candidate region of interest. Where in this region
are the most 5'-ends of mapped reads?
#+begin_src R +n :tangle R/example-analysis.R :file results/region-hist.png :width 800 :height 800 :results output graphics
  labs <- names(tmp[tmp > thresh])
  region <- as.numeric(c(sub("\\((.+),.*", "\\1", labs), sub("[^,]*,([^]]*)\\]", "\\1", labs)))
  d.region <- d$pos.chr11[d$pos.chr11 >= region[1] & d$pos.chr11 <= region[2]]
  p <- qplot(d.region, geom="histogram", binwidth=1)
  p + xlab("position on chromosome 11")
#+end_src

#+results:
[[file:results/region-hist.png]]

What is the mode of this plot?

#+begin_src R +n :tangle R/example-analysis.R
  # find mode
  pos.mode <- d.region[rev(order(table(d.region)))[1]]  
  print(pos.mode)
#+end_src

#+results:
: [1] 118358821

What do the mapped sequences that have this position look like?

#+begin_src R +n :tangle R/example-analysis.R
print(as.character(d$seq.chr11[d$pos.chr11 == pos.mode][1]))
#+end_src

#+results:
: [1] "GAGGCGGAGGTTGCAGTGAGTCGAGATCGCACCACTGCACCCCAGCCTGGGCGACAGCGAGACTCCGTCTCAAAAAAA"

Where does this sequence reside in the unrearranged MLL template?
There are some mismatches, but the region is show with =[= and =]=
below:

#+begin_example
TACTCTGAATCTCCCGCAAT)GTCCAATACTGTACTTTTTTACATAGTCATTGCTTAATGAATATG
TATTGAATTAAATATATGCCAGTGGACTACTAAAACCCAAAGTATATAAGAAGGGTATGGTTGAT
TATGTTTTTCTACATATTATTTGACATACTTCTATCTTCCCATGTTCTTACTATAGTTTGTGTAT
TGCCAAGTCTGTTGTGAGCCCTTCCACAAGTTTTGTTTAGAGGAGAACGAGCGCCCTCTGGAGGA
CCAGCTGGAAAATTGGTGTTGTCGTCGCTGCAAATTCTGTCACGTTTGTGGAGGGCAACATCAGG
CTACAAAGGTACAAAACTTGGTAATAGAACTACAGCTGGGCCTCTGTATCAGTGGGTTCTGTATC
CCTGGACTCAACCAACCTTGGATTGAATGTATCTGGGAAAAAATGAGTAGTTGCCTCTGTACTCT
ATGTGAACAGACTTTTTCTTGTCATTATTTCCTAAACAATACAGTATAACAACTATTTACATTGT
ATTAGGTATGATAAGTAATCTAGAGATAATTTAAAGTATATGGTGGGCG{{GATC}}CCAGCTACTCAG
GAGACTGAGGC[TGGAGAATCGCTTGAACCCAACAGGCGGAGGGTTGCAGTGAGTCGA{{GATC}}GCAC
CACTGCACCCCAGCCTGGGCGAC]AGCGAGACTCCGTCTCAAAAAAATAAATAAATAAAAATTAAA
ACAATTAAAAAAATAAAATTACAAATGGAAAG(GACAAACCAGACCTTACAACTG
#+end_example

